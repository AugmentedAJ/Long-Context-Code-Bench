{
  "dataset_version": "v0",
  "repo_url": "https://github.com/elastic/elasticsearch.git",
  "pr_number": 114992,
  "base_commit": "cf9687f56de49bf5f07152b70b388d3f971aa9a5",
  "head_commit": "cb7a1477a6026b1e625bb8e98a727bcef9756d91",
  "task_instructions": "You are working on a codebase. Your task is to make the necessary code changes to accomplish the following:\n\n[Failure store - selector syntax] Introduce selector syntax in the APIs and remove failure_store query param\n\n**Introduction**\r\n\r\n> In order to make adoption of failure stores simpler for all users, we are introducing a new syntactical feature to index expression resolution: The selector.\r\n>\r\n> Selectors, denoted with a :: followed by a recognized suffix will allow users to specify which component of an index abstraction they would like to operate on within an API call. In this case, an index abstraction is a concrete index, data stream, or alias; Any abstraction that can be resolved to a set of indices/shards. We define a component of an index abstraction to be some searchable unit of the index abstraction.\r\n>\r\n> To start, we will support two components: data and failures. Concrete indices are their own data components, while the data component for index aliases are all of the indices contained therein. For data streams, the data component corresponds to their backing indices. Data stream aliases mirror this, treating all backing indices of the data streams they correspond to as their data component.\r\n> \r\n> The failure component is only supported by data streams and data stream aliases. The failure component of these abstractions refer to the data streams' failure stores. Indices and index aliases do not have a failure component.\r\n\r\nFor more details and examples see https://github.com/elastic/elasticsearch/pull/113144. All this work has been cherry picked from there.\r\n\r\n**Purpose of this PR**\r\n\r\nThis PR is introducing the selector on the REST API level. The selector works as follows:\r\n\r\n- `::data`: resolve to the backing indices of a data stream/data stream alias and the indices themselves\r\n- `::failures`: resolve to the failure indices of a data stream/data stream alias. Indices do not have a failure component so the behaviour is defined by allowing empty results.\r\n- `::*`: resolve to data for all expressions and failures when it's supported.\r\n\r\nFurthermore, we introduce a new gate keeper `IndicesOptions`, the `allowSelectors`, this flag determines if an endpoint supports the selector naming scheme or not. It's function is complementary to `allowFailureIndices` which determines if an operation can be applied on failure index. Both are necessary and they work as follows:\r\n\r\n- `PUT my-data::*/_mapping`: will throw an error because `allowSelectors: false`, so we do not allow the selector index to be used when updating a mapping.\r\n- `PUT .fs-my-data-xxxx/_mapping`: will throw an error because `allowFailureIndices: false`, this operation satisfies the no selectors conditions, but it does try to directly access the mapping which is not allowed.\r\n\r\nFuture work:\r\n- Rollover API (https://github.com/elastic/elasticsearch/issues/115210)\r\n- Resolve API (https://github.com/elastic/elasticsearch/issues/115212)\r\n- Snapshot index resolution (https://github.com/elastic/elasticsearch/issues/115242)\r\n- \n\nPlease make all necessary code changes to complete this task.",
  "stats": {
    "files_changed": 25,
    "lines_added": 1418,
    "lines_deleted": 498,
    "total_diff_hunks": 198,
    "context_size_bytes": 687822,
    "truncated": false
  },
  "synthesized_task_instructions": "Introduce selector syntax in the APIs and remove the failure_store query parameter",
  "synthesis_model": "auggie/claude-sonnet-4.5",
  "synthesis_timestamp": "2025-10-30T16:50:07.016356Z"
}